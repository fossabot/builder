import opster
import paramiko


def ssh_pub_key(key_file):
    """Creates a string of a public key from the private key file.
    """
    key = paramiko.RSAKey(filename=key_file)
    pub = "{0} {1} autogenerated by polyphemus"
    pub = pub.format(key.get_name(), key.get_base64())
    return pub


@opster.command()
def register(provider=('p', 'aws', 'provider to register')):
    """ Register provider credentials """

    # Import provider method

    import importlib

    try:
        module = importlib.import_module('providers.%s' % provider)
    except ModuleNotFoundError:
        raise RuntimeError('No such provider')
        import sys
        sys.exit(1)

    class_name = provider.capitalize()
    cls = getattr(module, class_name)
    instance = cls()
    credentials = instance.get_credentials()

    # Write configuration file

    import configparser
    import os

    config = configparser.ConfigParser()
    config[provider] = credentials

    with open(os.path.expanduser('~/.config/builder.cfg'), 'w') as configfile:
        config.write(configfile)

    return True


@opster.command()
def rpm_build(spec=('s', 'spec-file', 'spec file for rpm build process'), target=('t', 'target', 'Operating system targeted by this package')):
    """ Build rpm """

    import os

    current_directory = os.path.dirname(os.path.realpath(__file__))
    mapping_configuration = os.path.join(current_directory, '..', 'MAPPING.ini')

    import configparser

    internal_config = configparser.ConfigParser()
    internal_config.read(mapping_configuration)
    targets = internal_config.sections()
    if not target in targets:
        import sys
        sys.stderr.write('Unsupported platform')
        sys.exit(1)
    else:
        provider = internal_config[target]['provider']

    import re
    import sys
    import os
    lines = open(os.path.expanduser(spec)).readlines()
    binary_options = {}
    for line in lines:
        m = re.match(r'^([A-Za-z0-9]+):(.*)', line)
        if m:
            key = m.group(1).strip()
            value = m.group(2).strip()
            binary_options[key] = value

    import configparser
    import os
    import pystache

    config = configparser.ConfigParser()
    config.read(os.path.expanduser('~/.config/builder.cfg'))
    try:
        credentials = config.items(provider)
    except KeyError:
        raise RuntimeError('Unregistered provider')
        import sys
        sys.exit(1)

    current_directory = os.path.dirname(os.path.realpath(__file__))

    template = os.path.join(current_directory, '..',
                            'templates', ('%s.tf' % provider))
    user_data = os.path.join(current_directory, '..',
                             'profiles', ('%s.yml' % provider))
    import tempfile
    tmp_file = tempfile.mkstemp()

    key = paramiko.RSAKey.generate(4096)
    key.write_private_key_file(tmp_file[1])

    tf_config = pystache.render(open(template).read(), {
        'credentials': dict(credentials), 'command': {'identifier': internal_config[target]['internal'] },
        'application': {
            'ssh_key': ssh_pub_key(tmp_file[1]),
            'user_data': open(user_data).read().replace('\n', '\\n')
        }
    })

    d = tempfile.mkdtemp()
    with open(os.path.join(d, 'main.tf'), 'w') as tf_file:
        tf_file.write(tf_config)

    import python_terraform as tf
    option_dict = dict()
    # option_dict['input'] = False
    option_dict['auto-approve'] = True
    tf = tf.Terraform(working_dir=d)

    try:
        return_code, stdout, stderr = tf.init()
    except FileNotFoundError:
        raise RuntimeError('Terraform not found')
        import sys
        sys.exit(1)

    try:
        return_code, stdout, stderr = tf.plan(d)
    except FileNotFoundError:
        raise RuntimeError('Terraform not found')
        import sys
        sys.exit(1)

    try:
        return_code, stdout, stderr = tf.apply(d, **option_dict)
    except FileNotFoundError:
        raise RuntimeError('Terraform not found')
        import sys
        sys.exit(1)

    import json
    tfstate = json.loads(open(os.path.join(d, 'terraform.tfstate')).read())

    public_dns = tfstate['modules'][0]['resources']['aws_instance.builder']['primary']['attributes']['public_dns']

    client = paramiko.SSHClient()

    # Avoid missing host entry
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    import time

    while True:
        time.sleep(10)
        try:
            client.connect(
                public_dns, username='ec2-user', key_filename=tmp_file[1])
        except Exception as e:
            continue
        else:
            break

    cmd = 'mkdir -p /home/ec2-user/rpmbuild/{SPECS,RPMS,SRPMS,SOURCES,BUILD,BUILDROOT}'
    client.exec_command(cmd)
    sftp = paramiko.SFTPClient.from_transport(client.get_transport())
    sftp.put(spec, '/home/ec2-user/rpmbuild/SPECS/%s' % os.path.basename(spec))

    import urllib.request
    archive = tempfile.mkstemp()
    archive_name = os.path.basename(binary_options['Source0'])
    urllib.request.urlretrieve(binary_options['Source0'], archive[1])
    package = os.path.basename(spec)
    sftp.put(archive[1], '/home/ec2-user/rpmbuild/SOURCES/%s' % archive_name)
    stdin, stdout, stderr = client.exec_command(
        'rpmbuild -bp /home/ec2-user/rpmbuild/SPECS/%s' % package, get_pty=True)
    stdin, stdout, stderr = client.exec_command(
        'rpmbuild -bc --short-circuit /home/ec2-user/rpmbuild/SPECS/%s' % package, get_pty=True)
    stdin, stdout, stderr = client.exec_command(
        'rpmbuild -bi --short-circuit /home/ec2-user/rpmbuild/SPECS/%s' % package, get_pty=True)
    stdin, stdout, stderr = client.exec_command(
        'rpmbuild -ba /home/ec2-user/rpmbuild/SPECS/%s' % package, get_pty=True)
    files = []
    for line in stdout.readlines():
        if line.startswith('Wrote'):
            _, path = line.split(':')
            files.append(path.strip())

    for binary in files:
        sftp.get(binary, '/tmp/%s' % os.path.basename(binary))

    client.close()

    try:
        return_code, stdout, stderr = tf.destroy(d)
    except FileNotFoundError:
        raise RuntimeError('Terraform not found')
        import sys
        sys.exit(1)

    return True


def cli():
    opster.dispatch()
